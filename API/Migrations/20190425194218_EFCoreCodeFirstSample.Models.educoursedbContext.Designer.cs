// <auto-generated />
using System;
using API.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace API.Migrations
{
    [DbContext(typeof(educoursedbContext))]
    [Migration("20190425194218_EFCoreCodeFirstSample.Models.educoursedbContext")]
    partial class EFCoreCodeFirstSampleModelseducoursedbContext
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("API.Models.Asset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("PublicId")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("Type")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Url")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Asset");
                });

            modelBuilder.Entity("API.Models.AssetToCourseAssignment", b =>
                {
                    b.Property<int>("AssetId");

                    b.Property<int>("CourseId");

                    b.HasKey("AssetId", "CourseId")
                        .HasName("PK_ASSETTOCOURSEASSIGNMENT");

                    b.HasIndex("CourseId");

                    b.ToTable("AssetToCourseAssignment");
                });

            modelBuilder.Entity("API.Models.AssetToFlashcardSetAssignment", b =>
                {
                    b.Property<int>("FlashcardSetId");

                    b.Property<int>("AssetId");

                    b.HasKey("FlashcardSetId", "AssetId")
                        .HasName("PK_ASSETTOFLASHCARDSETASSIGNME");

                    b.HasIndex("AssetId");

                    b.ToTable("AssetToFlashcardSetAssignment");
                });

            modelBuilder.Entity("API.Models.BadgeAssignment", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("BadgeId");

                    b.Property<byte[]>("CreatedAt")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("UserId", "BadgeId")
                        .HasName("PK_BADGEASSIGNMENT");

                    b.HasIndex("BadgeId");

                    b.ToTable("BadgeAssignment");
                });

            modelBuilder.Entity("API.Models.Badges", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<int>("ExperiencePoints");

                    b.Property<string>("Image")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Badges");
                });

            modelBuilder.Entity("API.Models.BlockItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BlockPosition");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<int>("ExamId");

                    b.HasKey("Id");

                    b.HasIndex("ExamId");

                    b.ToTable("BlockItem");
                });

            modelBuilder.Entity("API.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("API.Models.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Other")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Course");
                });

            modelBuilder.Entity("API.Models.CourseEnrolment", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("CourseId");

                    b.Property<byte[]>("EnrolmentDate")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("UserId", "CourseId")
                        .HasName("PK_COURSEENROLMENT");

                    b.HasIndex("CourseId");

                    b.ToTable("CourseEnrolment");
                });

            modelBuilder.Entity("API.Models.Exam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseId");

                    b.Property<string>("Level")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int>("NumberOfQuestions");

                    b.Property<int>("TimeLimit");

                    b.Property<int>("TotalExamPoints");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Exam");
                });

            modelBuilder.Entity("API.Models.ExamResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ExamId");

                    b.Property<string>("ExamName");

                    b.Property<string>("Mark")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int>("Percentage");

                    b.Property<int>("Points");

                    b.Property<int>("TotalExamPoints");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ExamId");

                    b.HasIndex("UserId");

                    b.ToTable("ExamResult");
                });

            modelBuilder.Entity("API.Models.Experience", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId");

                    b.Property<int>("ExperiencePoints");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Experience");
                });

            modelBuilder.Entity("API.Models.Flashcard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BackSide")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<int>("FlashcardSetId");

                    b.Property<string>("FrontSide")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("FlashcardSetId");

                    b.ToTable("Flashcard");
                });

            modelBuilder.Entity("API.Models.FlashcardSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("CreatedAt")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("Level")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Other")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("FlashcardSet");
                });

            modelBuilder.Entity("API.Models.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Answer")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int>("ExamId");

                    b.Property<string>("OptionFour")
                        .HasColumnName("Option_four")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("OptionOne")
                        .HasColumnName("Option_one")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("OptionThree")
                        .HasColumnName("Option_three")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("OptionTwo")
                        .HasColumnName("Option_two")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Question1")
                        .HasColumnName("Question")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("ExamId");

                    b.ToTable("Question");
                });

            modelBuilder.Entity("API.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Firstname")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Lastname")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<byte[]>("PasswordHash")
                        .HasMaxLength(500);

                    b.Property<byte[]>("PasswordSalt")
                        .HasMaxLength(500);

                    b.Property<string>("Role")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Username")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("API.Models.Asset", b =>
                {
                    b.HasOne("API.Models.User", "User")
                        .WithMany("Asset")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_ASSET_REFERENCE_USER")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("API.Models.AssetToCourseAssignment", b =>
                {
                    b.HasOne("API.Models.Asset", "Asset")
                        .WithMany("AssetToCourseAssignment")
                        .HasForeignKey("AssetId")
                        .HasConstraintName("FK_ASSETTOC_REFERENCE_ASSET");

                    b.HasOne("API.Models.Course", "Course")
                        .WithMany("AssetToCourseAssignment")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK_ASSETTOC_REFERENCE_COURSE");
                });

            modelBuilder.Entity("API.Models.AssetToFlashcardSetAssignment", b =>
                {
                    b.HasOne("API.Models.Asset", "Asset")
                        .WithMany("AssetToFlashcardSetAssignment")
                        .HasForeignKey("AssetId")
                        .HasConstraintName("FK_ASSETTOF_REFERENCE_ASSET");

                    b.HasOne("API.Models.FlashcardSet", "FlashcardSet")
                        .WithMany("AssetToFlashcardSetAssignment")
                        .HasForeignKey("FlashcardSetId")
                        .HasConstraintName("FK_ASSETTOF_REFERENCE_FLASHCAR");
                });

            modelBuilder.Entity("API.Models.BadgeAssignment", b =>
                {
                    b.HasOne("API.Models.Badges", "Badge")
                        .WithMany("BadgeAssignment")
                        .HasForeignKey("BadgeId")
                        .HasConstraintName("FK_BADGEASS_REFERENCE_BADGES");

                    b.HasOne("API.Models.User", "User")
                        .WithMany("BadgeAssignment")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_BADGEASS_REFERENCE_USER");
                });

            modelBuilder.Entity("API.Models.Badges", b =>
                {
                    b.HasOne("API.Models.Category", "Category")
                        .WithMany("Badges")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_BADGES_REFERENCE_CATEGORY")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("API.Models.BlockItem", b =>
                {
                    b.HasOne("API.Models.Exam", "Exam")
                        .WithMany("BlockItem")
                        .HasForeignKey("ExamId")
                        .HasConstraintName("FK_BLOCKITE_REFERENCE_EXAM")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("API.Models.Course", b =>
                {
                    b.HasOne("API.Models.Category", "Category")
                        .WithMany("Course")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_COURSE_REFERENCE_CATEGORY")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("API.Models.User", "User")
                        .WithMany("Course")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_COURSE_REFERENCE_USER")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("API.Models.CourseEnrolment", b =>
                {
                    b.HasOne("API.Models.Course", "Course")
                        .WithMany("CourseEnrolment")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK_COURSEEN_REFERENCE_COURSE");

                    b.HasOne("API.Models.User", "User")
                        .WithMany("CourseEnrolment")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_COURSEEN_REFERENCE_USER");
                });

            modelBuilder.Entity("API.Models.Exam", b =>
                {
                    b.HasOne("API.Models.Course", "Course")
                        .WithMany("Exam")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK_EXAM_REFERENCE_COURSE")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("API.Models.ExamResult", b =>
                {
                    b.HasOne("API.Models.Exam", "Exam")
                        .WithMany("ExamResult")
                        .HasForeignKey("ExamId")
                        .HasConstraintName("FK_EXAMRESU_REFERENCE_EXAM");

                    b.HasOne("API.Models.User", "User")
                        .WithMany("ExamResult")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_EXAMRESU_REFERENCE_USER");
                });

            modelBuilder.Entity("API.Models.Experience", b =>
                {
                    b.HasOne("API.Models.Category", "Category")
                        .WithMany("Experience")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_EXPERIEN_REFERENCE_CATEGORY")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("API.Models.User", "User")
                        .WithMany("Experience")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_EXPERIEN_REFERENCE_USER")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("API.Models.Flashcard", b =>
                {
                    b.HasOne("API.Models.FlashcardSet", "FlashcardSet")
                        .WithMany("Flashcard")
                        .HasForeignKey("FlashcardSetId")
                        .HasConstraintName("FK_FLASHCAR_REFERENCE_FLASHCAR")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("API.Models.FlashcardSet", b =>
                {
                    b.HasOne("API.Models.User", "User")
                        .WithMany("FlashcardSet")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_FLASHCAR_REFERENCE_USER")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("API.Models.Question", b =>
                {
                    b.HasOne("API.Models.Exam", "Exam")
                        .WithMany("Question")
                        .HasForeignKey("ExamId")
                        .HasConstraintName("FK_QUESTION_REFERENCE_EXAM")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
